// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// GatewayState gateway state
// swagger:model gateway_state
type GatewayState struct {

	// config
	Config map[string]interface{} `json:"config,omitempty"`

	// gateway id
	// Required: true
	GatewayID GatewayID `json:"gateway_id"`

	// name
	Name GatewayName `json:"name,omitempty"`

	// record
	Record *AccessGatewayRecord `json:"record,omitempty"`

	// status
	Status *GatewayStatus `json:"status,omitempty"`
}

// Validate validates this gateway state
func (m *GatewayState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGatewayID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecord(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GatewayState) validateGatewayID(formats strfmt.Registry) error {

	if err := m.GatewayID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("gateway_id")
		}
		return err
	}

	return nil
}

func (m *GatewayState) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("name")
		}
		return err
	}

	return nil
}

func (m *GatewayState) validateRecord(formats strfmt.Registry) error {

	if swag.IsZero(m.Record) { // not required
		return nil
	}

	if m.Record != nil {
		if err := m.Record.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("record")
			}
			return err
		}
	}

	return nil
}

func (m *GatewayState) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GatewayState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GatewayState) UnmarshalBinary(b []byte) error {
	var res GatewayState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
