// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import indexer "magma/orc8r/cloud/go/services/state/indexer"
import mock "github.com/stretchr/testify/mock"
import state "magma/orc8r/cloud/go/services/state"

// Indexer is an autogenerated mock type for the Indexer type
type Indexer struct {
	mock.Mock
}

// CompleteReindex provides a mock function with given fields: from, to
func (_m *Indexer) CompleteReindex(from uint64, to uint64) error {
	ret := _m.Called(from, to)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(from, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetID provides a mock function with given fields:
func (_m *Indexer) GetID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSubscriptions provides a mock function with given fields:
func (_m *Indexer) GetSubscriptions() []indexer.Subscription {
	ret := _m.Called()

	var r0 []indexer.Subscription
	if rf, ok := ret.Get(0).(func() []indexer.Subscription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]indexer.Subscription)
		}
	}

	return r0
}

// GetVersion provides a mock function with given fields:
func (_m *Indexer) GetVersion() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Index provides a mock function with given fields: networkID, reporterHWID, states
func (_m *Indexer) Index(networkID string, reporterHWID string, states []state.State) (indexer.StateErrors, error) {
	ret := _m.Called(networkID, reporterHWID, states)

	var r0 indexer.StateErrors
	if rf, ok := ret.Get(0).(func(string, string, []state.State) indexer.StateErrors); ok {
		r0 = rf(networkID, reporterHWID, states)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(indexer.StateErrors)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []state.State) error); ok {
		r1 = rf(networkID, reporterHWID, states)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareReindex provides a mock function with given fields: from, to, isFirstReindex
func (_m *Indexer) PrepareReindex(from uint64, to uint64, isFirstReindex bool) error {
	ret := _m.Called(from, to, isFirstReindex)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64, bool) error); ok {
		r0 = rf(from, to, isFirstReindex)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
