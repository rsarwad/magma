From da8e709ee1e9cf19fba46013cfe3ab9a077cc74a Mon Sep 17 00:00:00 2001
From: Pravin B Shelar <pbshelar@fb.com>
Date: Sun, 12 Apr 2020 21:18:26 +0000
Subject: [PATCH 8/8] ovs: datapath: add support for end marker

---
 datapath/linux/compat/gtp.c    | 30 +++++++++++------
 tests/system-layer3-tunnels.at | 59 ++++++++++++++++++++++++++++++++++
 2 files changed, 80 insertions(+), 9 deletions(-)

diff --git a/datapath/linux/compat/gtp.c b/datapath/linux/compat/gtp.c
index 414911df5..b3e074601 100644
--- a/datapath/linux/compat/gtp.c
+++ b/datapath/linux/compat/gtp.c
@@ -507,21 +507,33 @@ static inline void gtp1_push_header(struct sk_buff *skb, __be32 tid)
 	 */
 }
 
-static inline int gtp1_push_control_header(struct sk_buff *skb, __be32 tid, struct gtp1_control_pkt_opts *opts)
+static inline int gtp1_push_control_header(struct sk_buff *skb, __be32 tid, struct gtp1_control_pkt_opts *opts,
+        struct net_device *dev)
 {
-	int payload_len = skb->len;
 	struct gtp1_header *gtp1c;
+	int payload_len;
 
 	if (opts->ver != GTP_CONTROL_PKT_INFO_V1) {
-		return 1;
+		return -ENOENT;
 	}
+        if (opts->type == 0xFE) {
+                // for end marker ignore skb data.
+                netdev_dbg(dev, "xmit pkt with null data");
+                pskb_trim(skb, 0);
+        }
+	if (skb_cow_head(skb, sizeof (*gtp1c)) < 0)
+		return -ENOMEM;
 
+	payload_len = skb->len;
 	gtp1c = (struct gtp1_header *) skb_push(skb, sizeof(*gtp1c));
 
 	gtp1c->flags	= opts->flags;
 	gtp1c->type	= opts->type;
 	gtp1c->length	= htons(payload_len);
 	gtp1c->tid	= tid;
+        netdev_dbg(dev, "GTP control pkt: ver %d flags %x type %x pkt len %d tid %x",
+                   opts->ver, opts->flags, opts->type, skb->len, tid);
+
 	return 0;
 }
 
@@ -638,13 +650,13 @@ static netdev_tx_t gtp_dev_xmit_fb(struct sk_buff *skb, struct net_device *dev)
 	} else if (info->key.tun_flags & TUNNEL_GTP_OPT) {
                 struct gtp1_control_pkt_opts *opts = ip_tunnel_info_opts(info);
                 __be32 tid = tunnel_id_to_key32(info->key.tun_id);
+                int err;
 
-                netdev_dbg(dev, "control packet with opt ver %d flags %x type %x len %d tid %x",
-                        opts->ver, opts->flags, opts->type, skb->len, tid);
-
-		if (gtp1_push_control_header(skb, tid, opts)) {
-			goto err_rt;
-		}
+                err = gtp1_push_control_header(skb, tid, opts, dev);
+               if (err) {
+                        netdev_info(dev, "cntr pkt error %d", err);
+                        goto err_rt;
+                }
 	} else {
                 netdev_dbg(dev, "Missing tunnel OPT");
                 goto err_rt;
diff --git a/tests/system-layer3-tunnels.at b/tests/system-layer3-tunnels.at
index 78211d399..1ad0ce487 100644
--- a/tests/system-layer3-tunnels.at
+++ b/tests/system-layer3-tunnels.at
@@ -153,6 +153,7 @@ AT_CHECK([tail -1 stdout], [0],
 
 OVS_VSWITCHD_STOP
 AT_CLEANUP
+
 AT_SETUP([layer3 - ping over GTP])
 OVS_TRAFFIC_VSWITCHD_START([set Bridge br0 other-config:hwaddr="00:12:34:56:78:bb"])
 OVS_CHECK_GTP_L3()
@@ -371,3 +372,61 @@ RX: 1 TX: 1 remote ip: 172.31.1.1, seq 4, pending send 0
 OVS_TRAFFIC_VSWITCHD_STOP
 AT_CLEANUP
 
+AT_SETUP([layer3 - GTP end marker test])
+OVS_TRAFFIC_VSWITCHD_START([set Bridge br0 other-config:hwaddr="00:12:34:56:78:bb"])
+OVS_CHECK_GTP_L3()
+
+ADD_BR([br-underlay])
+
+ADD_NAMESPACES(at_ns0)
+
+dnl Set up underlay link from host into the namespace using veth pair.
+ADD_VETH(p0, at_ns0, br-underlay, "172.31.1.1/24")
+AT_CHECK([ip addr add dev br-underlay "172.31.1.100/24"])
+AT_CHECK([ip link set dev br-underlay up])
+
+dnl Set up tunnel endpoints on OVS outside the namespace and with a native
+dnl linux device inside the namespace.
+
+ADD_OVS_TUNNEL([gtp], [br0], [at_gtp0], [172.31.1.1], [10.1.1.2/24], [options:key=flow])
+AT_CHECK([ip neigh add 10.1.1.1 lladdr 00:12:34:56:78:aa dev br0])
+NS_CHECK_EXEC([at_ns0], [gtp-link add at_gtp1 --sgsn &], [0], [ignore])
+NS_CHECK_EXEC([at_ns0], [gtp-tunnel add at_gtp1 v1 0 0 10.1.1.1 172.31.1.100], [0], [ignore], [ignore])
+NS_CHECK_EXEC([at_ns0], [ip addr add dev at_gtp1 10.1.1.1/24])
+NS_CHECK_EXEC([at_ns0], [ip link set dev at_gtp1 mtu 1450 up])
+NS_CHECK_EXEC([at_ns0], [ip link set dev p0 mtu 1480 up])
+
+AT_CHECK([ovs-ofctl add-flow br-underlay "actions=normal"])
+
+AT_CHECK([ovs-appctl vlog/set dbg], [0], [ignore])
+AT_CHECK([echo 'module openvswitch +p' > /sys/kernel/debug/dynamic_debug/control])
+AT_CHECK([echo 'module gtp +p' > /sys/kernel/debug/dynamic_debug/control])
+sleep 1
+
+dnl Now add rules for OVS to forward to the tunnel and local port
+AT_CHECK([ovs-ofctl add-flow br0 "priority=1 action=drop"])
+AT_CHECK([ovs-ofctl add-flow br0 "priority=100 ip,nw_dst=10.1.1.1 action=output:at_gtp0"])
+AT_CHECK([ovs-ofctl add-flow br0 "priority=100 ip,nw_dst=10.1.1.2 action=mod_dl_src:00:12:34:56:78:aa,mod_dl_dst:00:12:34:56:78:bb,local"])
+AT_CHECK([ovs-ofctl add-flow br0 "priority=100 table=99,action=set_field:0xfe->tun_gtp_msg_type,set_field:0x30->tun_gtp_flags,output:at_gtp0"])
+
+dnl First, check the underlay
+NS_CHECK_EXEC([at_ns0], [ping -q -c 3 -i 0.3 -w 2 172.31.1.100 | FORMAT_PING], [0], [dnl
+3 packets transmitted, 3 received, 0% packet loss, time 0ms
+])
+
+OVS_WAIT_UNTIL([ip netns exec at_ns0 ping -c 1 10.1.1.2])
+
+NS_CHECK_EXEC([at_ns0], [tcpdump -l -n -xx -U udp -i p0 > p1.pcap &])
+sleep 1
+
+AT_CHECK([ovs-ofctl -O OpenFlow15 packet-out br0 "in_port=local packet=50540000000a5054000000008000, actions=load:100->tun_id[[0..31]],set_field:172.31.1.1->tun_dst,set_field:0xfe->tun_gtp_msg_type,set_field:0x30->tun_gtp_flags,output:at_gtp0"])
+
+sleep 2
+
+OVS_WAIT_UNTIL([cat p1.pcap | egrep "0x0000:.*0800 4500"                                2>&1 1>/dev/null])
+OVS_WAIT_UNTIL([cat p1.pcap | egrep "0x0010:.*ac1f 0164 ac1f"                           2>&1 1>/dev/null])
+OVS_WAIT_UNTIL([cat p1.pcap | egrep "0x0020:  0101 0868 0868 0010 5ac5 30fe 0000 0000"  2>&1 1>/dev/null])
+OVS_WAIT_UNTIL([cat p1.pcap | egrep "0x0030:  0064"                                     2>&1 1>/dev/null])
+
+OVS_TRAFFIC_VSWITCHD_STOP
+AT_CLEANUP
-- 
2.17.1

