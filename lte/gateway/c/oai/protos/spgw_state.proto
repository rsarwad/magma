/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the Apache License, Version 2.0  (the "License"); you may not use this file
 * except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */

syntax = "proto3";

import "lte/gateway/c/oai/protos/common_types.proto";

package magma.lte.gateway.spgw;

// sgw_bearer_context_information
message SgwEpsBearerContextInfo {
    bytes imsi = 1;
    uint32 imsi_unauth_indicator = 2;
    string msisdn = 3;
    Ecgi last_known_cell_id = 4;

    uint32 mme_teid_s11 = 10; // teid_t
    bytes mme_ip_address_s11 = 11;

    uint32 sgw_teid_s11_s4 = 15;
    bytes sgw_ip_address_s11_s4 = 16;

    SgwPdnConnection pdn_connection = 20;
}

// pgw_eps_bearer_context_information
message PgwEpsBearerContextInfo {
    bytes imsi = 1;
    uint32 imsi_unauth_indicator = 2;
    string msisdn = 3;
}

// sgw_pdn_connection
message SgwPdnConnection {
    string apn_in_use = 1;
    bytes pgw_address_in_use_cp = 2;

    uint32 default_bearer = 10;
    bool ue_suspended_for_ps_handover = 11;

    repeated SgwEpsBearerContext eps_bearer_list = 15;
}

// sgw_eps_bearer_ctxt_t
message SgwEpsBearerContext {
    uint32 eps_bearer_id = 1;
    bytes paa = 2;

    bytes pgw_address_in_use_up = 10;
    uint32 pgw_teid_s5_s8_up = 11;
    bytes sgw_ip_address_s5_s8_up = 12;
    uint32 sgw_teid_s5_s8_up = 13;
    bytes sgw_ip_address_s1u_s12_s4_up = 14;
    uint32 sgw_teid_s1u_s12_s4_up = 15;
    bytes enb_ip_address_s1u = 16;
    uint32 enb_teid_s1u = 17;

    BearerQos eps_bearer_qos = 20;
    TrafficFlowTemplate tft = 21;

    uint32 num_sdf = 25;
    repeated uint32 sdf_ids = 26;
}

// traffic_flow_template
message TrafficFlowTemplate {
    PacketFilterList packet_filter_list = 1;
    ParametersList parameters_list = 2;
    uint32 tft_operation_code = 3;
    uint32 number_of_packet_filters = 4;
    uint32 ebit = 5;
}

// sdf_template
message SdfTemplate {
    uint32 number_of_packet_filters = 1;
    repeated PacketFilter sdf_filter = 2;
}

// packet_filter_list
message PacketFilterList {
    repeated PacketFilter create_new_tft = 1;
    repeated PacketFilter add_packet_filter = 2;
    repeated PacketFilter replace_packet_filter = 3;
    repeated uint32 delete_packet_filter_identifier = 4;
}

// packet_filter
message PacketFilter {
    uint32 spare = 1;
    uint32 direction = 2;
    uint32 identifier = 3;
    uint32 eval_precedence = 4;
    uint32 length = 5;
    PacketFilterContents packet_filter_contents = 6;
}

// port_range
message PortRange {
    uint32 low_limit = 1;
    uint32 high_limit = 2;
}

// packet_filter_contents
message PacketFilterContents {
    uint32 flags = 1;

    message IpRemoteAddress {
        uint32 addr = 1;
        uint32 mask = 2;
    }

    repeated IpRemoteAddress ipv4_remote_addresses = 2;
    repeated IpRemoteAddress ipv6_remote_addresses = 3;
    uint32 protocol_identifier_nextheader = 4;

    uint32 single_local_port = 10;
    PortRange local_port_range = 11;
    uint32 single_remote_port = 12;
    PortRange remote_port_range = 13;

    uint32 security_parameter_index = 20;

    message TypeOfServiceTrafficClass {
        uint32 value = 1;
        uint32 mask = 2;
    }

    TypeOfServiceTrafficClass type_of_service_traffic_class = 21;
    uint32 flow_label = 22;
}

// parameters_list
message ParametersList {
    repeated Parameter parameters = 1;
    uint32 num_parameters = 2;
}

// parameter_t
message Parameter {
    uint32 parameter_identifier = 1;
    uint32 length = 2;
    bytes contents = 3;
}

// eps_bearer_qos_t
message BearerQos {
    uint32 pci = 1;
    uint32 pl = 2;
    uint32 pvi = 3;
    uint32 qci = 5;

    Ambr gbr = 10;
    Ambr mbr = 11;
}

// s_plus_p_gw_eps_bearer_context_information
message S11BearerContext {
    SgwEpsBearerContextInfo sgw_eps_bearer_context = 1;
    PgwEpsBearerContextInfo pgw_eps_bearer_context = 2;
}

// mme_sgw_tunnel
message MmeSgwTunnel {
    uint32 local_teid = 1;
    uint32 remote_teid = 2;
}

// gtvpv1u_data
message GTPV1uData {
    string ip_address = 1;
    uint32 seq_num = 2;
    uint32 restart_counter = 3;

    uint32 fd0 = 4;
    uint32 fd1u = 5;
}

// pcc_rule
message PccRule {
    string name = 1;
    bool is_activated = 2;
    uint32 sdf_id = 3;
    BearerQos bearer_qos = 4;
    uint32 precedence = 5;
}

// sgw_state
message SgwState {
    map<uint32, MmeSgwTunnel> s11teid_mme = 1;
    map<uint32, S11BearerContext> s11_bearer_context_info = 2;
    uint64 sgw_ip_address_s1u_s12_s4_up = 3;
    GTPV1uData gtpv1u_data = 4;
}

// pgw_state
message PgwState {
    map<uint32, PccRule> deactivated_predefined_pcc_rules = 1;
    map<uint32, PccRule> predefined_pcc_rules = 2;
    repeated uint64 ipv4_list_free = 3;
    repeated uint64 ipv4_list_allocated = 4;
}

message SpgwState {
    SgwState sgw_state = 1;
    PgwState pgw_state = 2;
}
