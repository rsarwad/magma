---
# Copyright (c) 2016-present, Facebook, Inc.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree. An additional grant
# of patent rights can be found in the PATENTS file in the same directory.
#

- fail: msg="MAGMA_ROOT and OUTPUT_DIR are required"
  when:
    - MAGMA_ROOT is not defined or OUTPUT_DIR is not defined

- name: Include vars of all.yaml
  include_vars:
    file: all.yaml
    name: all_vars

- name: Converting WORK_DIR to absolute path
  shell: realpath {{ all_vars.WORK_DIR }}
  register: WORK_DIR_ABSOLUTE

- name: Converting OUTPUT_DIR to absolute path
  shell: realpath {{ OUTPUT_DIR }}
  register: OUTPUT_DIR_ABSOLUTE

- name: Removing "{{ WORK_DIR_ABSOLUTE.stdout }}".
  become: yes
  file:
    path: "{{ WORK_DIR_ABSOLUTE.stdout }}"
    state: absent
    force: yes

- name: Creating "{{ all_vars.WORK_DIR }}"
  file:
    path: "{{ all_vars.WORK_DIR }}"
    state: directory
    mode: 0755
  register: GIT_HOME

- name: Update and upgrade apt packages
  become: yes
  apt:
    update_cache: yes
    upgrade: yes

- name: Install build dependencies.
  become: yes
  apt:
    name: "{{ packages }}"
  vars:
    packages:
      - graphviz
      - debhelper
      - dh-autoreconf
      - python-all
      - python-twisted-conch
      - module-assistant
      - openssl
      - pkg-config
      - libssl-dev
      - build-essential
      - libcap-ng-dev
      - git
      - ruby-dev

- name: Ensure correct kernel headers are installed.
  shell: "apt -y install linux-headers-$(uname -r)"
  become: yes

- name: Install FPM
  become: yes
  gem: name=fpm
       user_install=no
       state=present

- name: Cloning the ovs "{{ all_vars.ovs_version }}".
  git:
    repo: https://github.com/openvswitch/ovs.git
    dest: "{{ GIT_HOME.path }}/ovs"
    version: "{{ all_vars.ovs_version }}"

- name: Uploading gtp backport patch to remote.
  synchronize:
    src: "{{ MAGMA_ROOT }}/{{ all_vars.gtp_patch_path }}/gtp-v4.9-backport/"
    dest: "{{ GIT_HOME.path }}/ovs/flow-based-gtp-linux-v4.9"

- name: Uploading gtp patches to remote.
  synchronize:
    src: "{{ MAGMA_ROOT }}/{{ all_vars.gtp_patch_path }}/ovs/{{ all_vars.ovs_version_short }}/"
    dest: "{{ GIT_HOME.path }}/ovs/"
  with_items:
    - "{{ all_vars.patches }}"

- name: Patch ovs
  command: git apply "{{ item }}"
  args:
    chdir: "{{ GIT_HOME.path }}/ovs"
  with_items:
      - "{{ all_vars.patches }}"

- name: Execute the boot.sh script.
  command: sh boot.sh
  args:
    chdir: "{{ GIT_HOME.path }}/ovs"

- name: Execute via fakeroot the make debian/rules.
  command:  fakeroot make -f debian/rules DATAPATH_CONFIGURE_OPTS=$DATAPATH_CONFIGURE_OPTS DEB_BUILD_OPTIONS=$DEB_BUILD_OPTIONS binary
  ignore_errors: true
  args:
    chdir: "{{ GIT_HOME.path }}/ovs"

- name: Creating /usr/src/linux.
  become: yes
  file:
    path: /usr/src/linux
    state: directory
    mode: 0755

- name: Setting up KVERS var.
  shell: uname -r
  register: kvers

- name: Making binaries modules.
  command: make -f debian/rules.modules KSRC="/lib/modules/{{ kvers.stdout }}/build" KVERS={{ kvers.stdout }} binary-modules
  ignore_errors: true
  become: yes
  args:
    chdir: "{{ GIT_HOME.path }}/ovs"

- name: Find built .deb
  shell: find /usr/src/*.deb
  register: aoi_built_packages

- name: Find built .deb
  shell: find {{ GIT_HOME.path }}/*.deb
  register: built_packages

- name: Copy freshly built .deb packages
  command: cp -u {{ item }} {{ OUTPUT_DIR }}
  with_items:
    - "{{ aoi_built_packages.stdout_lines }}"

- name: Copy freshly built .deb packages
  command: cp -u {{ item }} {{ OUTPUT_DIR }}
  with_items:
    - "{{ built_packages.stdout_lines }}"
  when: OUTPUT_DIR_ABSOLUTE.stdout != GIT_HOME.path
