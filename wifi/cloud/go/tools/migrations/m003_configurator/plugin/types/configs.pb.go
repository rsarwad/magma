// Code generated by protoc-gen-go. DO NOT EDIT.
// source: configs.proto

package types

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type WifiNetworkConfig struct {
	VlAuthServerAddr         string            `protobuf:"bytes,4,opt,name=vl_auth_server_addr,json=vlAuthServerAddr,proto3" json:"vl_auth_server_addr,omitempty"`
	VlAuthServerPort         int32             `protobuf:"varint,5,opt,name=vl_auth_server_port,json=vlAuthServerPort,proto3" json:"vl_auth_server_port,omitempty"`
	VlAuthServerSharedSecret string            `protobuf:"bytes,6,opt,name=vl_auth_server_shared_secret,json=vlAuthServerSharedSecret,proto3" json:"vl_auth_server_shared_secret,omitempty"`
	PingHostList             []string          `protobuf:"bytes,7,rep,name=ping_host_list,json=pingHostList,proto3" json:"ping_host_list,omitempty"`
	PingNumPackets           int32             `protobuf:"varint,8,opt,name=ping_num_packets,json=pingNumPackets,proto3" json:"ping_num_packets,omitempty"`
	PingTimeoutSecs          int32             `protobuf:"varint,9,opt,name=ping_timeout_secs,json=pingTimeoutSecs,proto3" json:"ping_timeout_secs,omitempty"`
	XwfRadiusServer          string            `protobuf:"bytes,11,opt,name=xwf_radius_server,json=xwfRadiusServer,proto3" json:"xwf_radius_server,omitempty"`
	XwfConfig                string            `protobuf:"bytes,17,opt,name=xwf_config,json=xwfConfig,proto3" json:"xwf_config,omitempty"`
	XwfDhcpDns1              string            `protobuf:"bytes,18,opt,name=xwf_dhcp_dns1,json=xwfDhcpDns1,proto3" json:"xwf_dhcp_dns1,omitempty"`
	XwfDhcpDns2              string            `protobuf:"bytes,19,opt,name=xwf_dhcp_dns2,json=xwfDhcpDns2,proto3" json:"xwf_dhcp_dns2,omitempty"`
	XwfRadiusSharedSecret    string            `protobuf:"bytes,20,opt,name=xwf_radius_shared_secret,json=xwfRadiusSharedSecret,proto3" json:"xwf_radius_shared_secret,omitempty"`
	XwfRadiusAuthPort        int32             `protobuf:"varint,21,opt,name=xwf_radius_auth_port,json=xwfRadiusAuthPort,proto3" json:"xwf_radius_auth_port,omitempty"`
	XwfRadiusAcctPort        int32             `protobuf:"varint,22,opt,name=xwf_radius_acct_port,json=xwfRadiusAcctPort,proto3" json:"xwf_radius_acct_port,omitempty"`
	XwfUamSecret             string            `protobuf:"bytes,23,opt,name=xwf_uam_secret,json=xwfUamSecret,proto3" json:"xwf_uam_secret,omitempty"`
	XwfPartnerName           string            `protobuf:"bytes,24,opt,name=xwf_partner_name,json=xwfPartnerName,proto3" json:"xwf_partner_name,omitempty"`
	MgmtVpnEnabled           bool              `protobuf:"varint,13,opt,name=mgmt_vpn_enabled,json=mgmtVpnEnabled,proto3" json:"mgmt_vpn_enabled,omitempty"`
	MgmtVpnProto             string            `protobuf:"bytes,14,opt,name=mgmt_vpn_proto,json=mgmtVpnProto,proto3" json:"mgmt_vpn_proto,omitempty"`
	MgmtVpnRemote            string            `protobuf:"bytes,15,opt,name=mgmt_vpn_remote,json=mgmtVpnRemote,proto3" json:"mgmt_vpn_remote,omitempty"`
	OpenrEnabled             bool              `protobuf:"varint,16,opt,name=openr_enabled,json=openrEnabled,proto3" json:"openr_enabled,omitempty"`
	Ssid                     string            `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	Password                 string            `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	VlSsid                   string            `protobuf:"bytes,3,opt,name=vl_ssid,json=vlSsid,proto3" json:"vl_ssid,omitempty"`
	XwfEnabled               bool              `protobuf:"varint,10,opt,name=xwf_enabled,json=xwfEnabled,proto3" json:"xwf_enabled,omitempty"`
	XwfTrafficClasses        []string          `protobuf:"bytes,12,rep,name=xwf_traffic_classes,json=xwfTrafficClasses,proto3" json:"xwf_traffic_classes,omitempty"`
	AdditionalProps          map[string]string `protobuf:"bytes,25,rep,name=additional_props,json=additionalProps,proto3" json:"additional_props,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral     struct{}          `json:"-"`
	XXX_unrecognized         []byte            `json:"-"`
	XXX_sizecache            int32             `json:"-"`
}

func (m *WifiNetworkConfig) Reset()         { *m = WifiNetworkConfig{} }
func (m *WifiNetworkConfig) String() string { return proto.CompactTextString(m) }
func (*WifiNetworkConfig) ProtoMessage()    {}
func (*WifiNetworkConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_configs_b35d5783e300c2e2, []int{0}
}
func (m *WifiNetworkConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WifiNetworkConfig.Unmarshal(m, b)
}
func (m *WifiNetworkConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WifiNetworkConfig.Marshal(b, m, deterministic)
}
func (dst *WifiNetworkConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WifiNetworkConfig.Merge(dst, src)
}
func (m *WifiNetworkConfig) XXX_Size() int {
	return xxx_messageInfo_WifiNetworkConfig.Size(m)
}
func (m *WifiNetworkConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WifiNetworkConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WifiNetworkConfig proto.InternalMessageInfo

func (m *WifiNetworkConfig) GetVlAuthServerAddr() string {
	if m != nil {
		return m.VlAuthServerAddr
	}
	return ""
}

func (m *WifiNetworkConfig) GetVlAuthServerPort() int32 {
	if m != nil {
		return m.VlAuthServerPort
	}
	return 0
}

func (m *WifiNetworkConfig) GetVlAuthServerSharedSecret() string {
	if m != nil {
		return m.VlAuthServerSharedSecret
	}
	return ""
}

func (m *WifiNetworkConfig) GetPingHostList() []string {
	if m != nil {
		return m.PingHostList
	}
	return nil
}

func (m *WifiNetworkConfig) GetPingNumPackets() int32 {
	if m != nil {
		return m.PingNumPackets
	}
	return 0
}

func (m *WifiNetworkConfig) GetPingTimeoutSecs() int32 {
	if m != nil {
		return m.PingTimeoutSecs
	}
	return 0
}

func (m *WifiNetworkConfig) GetXwfRadiusServer() string {
	if m != nil {
		return m.XwfRadiusServer
	}
	return ""
}

func (m *WifiNetworkConfig) GetXwfConfig() string {
	if m != nil {
		return m.XwfConfig
	}
	return ""
}

func (m *WifiNetworkConfig) GetXwfDhcpDns1() string {
	if m != nil {
		return m.XwfDhcpDns1
	}
	return ""
}

func (m *WifiNetworkConfig) GetXwfDhcpDns2() string {
	if m != nil {
		return m.XwfDhcpDns2
	}
	return ""
}

func (m *WifiNetworkConfig) GetXwfRadiusSharedSecret() string {
	if m != nil {
		return m.XwfRadiusSharedSecret
	}
	return ""
}

func (m *WifiNetworkConfig) GetXwfRadiusAuthPort() int32 {
	if m != nil {
		return m.XwfRadiusAuthPort
	}
	return 0
}

func (m *WifiNetworkConfig) GetXwfRadiusAcctPort() int32 {
	if m != nil {
		return m.XwfRadiusAcctPort
	}
	return 0
}

func (m *WifiNetworkConfig) GetXwfUamSecret() string {
	if m != nil {
		return m.XwfUamSecret
	}
	return ""
}

func (m *WifiNetworkConfig) GetXwfPartnerName() string {
	if m != nil {
		return m.XwfPartnerName
	}
	return ""
}

func (m *WifiNetworkConfig) GetMgmtVpnEnabled() bool {
	if m != nil {
		return m.MgmtVpnEnabled
	}
	return false
}

func (m *WifiNetworkConfig) GetMgmtVpnProto() string {
	if m != nil {
		return m.MgmtVpnProto
	}
	return ""
}

func (m *WifiNetworkConfig) GetMgmtVpnRemote() string {
	if m != nil {
		return m.MgmtVpnRemote
	}
	return ""
}

func (m *WifiNetworkConfig) GetOpenrEnabled() bool {
	if m != nil {
		return m.OpenrEnabled
	}
	return false
}

func (m *WifiNetworkConfig) GetSsid() string {
	if m != nil {
		return m.Ssid
	}
	return ""
}

func (m *WifiNetworkConfig) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *WifiNetworkConfig) GetVlSsid() string {
	if m != nil {
		return m.VlSsid
	}
	return ""
}

func (m *WifiNetworkConfig) GetXwfEnabled() bool {
	if m != nil {
		return m.XwfEnabled
	}
	return false
}

func (m *WifiNetworkConfig) GetXwfTrafficClasses() []string {
	if m != nil {
		return m.XwfTrafficClasses
	}
	return nil
}

func (m *WifiNetworkConfig) GetAdditionalProps() map[string]string {
	if m != nil {
		return m.AdditionalProps
	}
	return nil
}

type WifiGatewayConfig struct {
	Info                          string            `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	MeshId                        string            `protobuf:"bytes,2,opt,name=mesh_id,json=meshId,proto3" json:"mesh_id,omitempty"`
	Latitude                      float64           `protobuf:"fixed64,3,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude                     float64           `protobuf:"fixed64,4,opt,name=longitude,proto3" json:"longitude,omitempty"`
	WifiDisabled                  bool              `protobuf:"varint,5,opt,name=wifi_disabled,json=wifiDisabled,proto3" json:"wifi_disabled,omitempty"`
	MeshRssiThreshold             int32             `protobuf:"varint,6,opt,name=mesh_rssi_threshold,json=meshRssiThreshold,proto3" json:"mesh_rssi_threshold,omitempty"`
	ClientChannel                 string            `protobuf:"bytes,7,opt,name=client_channel,json=clientChannel,proto3" json:"client_channel,omitempty"`
	UseOverrideXwf                bool              `protobuf:"varint,8,opt,name=use_override_xwf,json=useOverrideXwf,proto3" json:"use_override_xwf,omitempty"`
	OverrideXwfEnabled            bool              `protobuf:"varint,9,opt,name=override_xwf_enabled,json=overrideXwfEnabled,proto3" json:"override_xwf_enabled,omitempty"`
	OverrideXwfRadiusServer       string            `protobuf:"bytes,10,opt,name=override_xwf_radius_server,json=overrideXwfRadiusServer,proto3" json:"override_xwf_radius_server,omitempty"`
	OverrideXwfConfig             string            `protobuf:"bytes,11,opt,name=override_xwf_config,json=overrideXwfConfig,proto3" json:"override_xwf_config,omitempty"`
	OverrideXwfDhcpDns1           string            `protobuf:"bytes,12,opt,name=override_xwf_dhcp_dns1,json=overrideXwfDhcpDns1,proto3" json:"override_xwf_dhcp_dns1,omitempty"`
	OverrideXwfDhcpDns2           string            `protobuf:"bytes,13,opt,name=override_xwf_dhcp_dns2,json=overrideXwfDhcpDns2,proto3" json:"override_xwf_dhcp_dns2,omitempty"`
	OverrideXwfRadiusSharedSecret string            `protobuf:"bytes,14,opt,name=override_xwf_radius_shared_secret,json=overrideXwfRadiusSharedSecret,proto3" json:"override_xwf_radius_shared_secret,omitempty"`
	OverrideXwfRadiusAuthPort     int32             `protobuf:"varint,15,opt,name=override_xwf_radius_auth_port,json=overrideXwfRadiusAuthPort,proto3" json:"override_xwf_radius_auth_port,omitempty"`
	OverrideXwfRadiusAcctPort     int32             `protobuf:"varint,16,opt,name=override_xwf_radius_acct_port,json=overrideXwfRadiusAcctPort,proto3" json:"override_xwf_radius_acct_port,omitempty"`
	OverrideXwfUamSecret          string            `protobuf:"bytes,17,opt,name=override_xwf_uam_secret,json=overrideXwfUamSecret,proto3" json:"override_xwf_uam_secret,omitempty"`
	OverrideXwfPartnerName        string            `protobuf:"bytes,18,opt,name=override_xwf_partner_name,json=overrideXwfPartnerName,proto3" json:"override_xwf_partner_name,omitempty"`
	UseOverrideSsid               bool              `protobuf:"varint,19,opt,name=use_override_ssid,json=useOverrideSsid,proto3" json:"use_override_ssid,omitempty"`
	OverrideSsid                  string            `protobuf:"bytes,20,opt,name=override_ssid,json=overrideSsid,proto3" json:"override_ssid,omitempty"`
	OverridePassword              string            `protobuf:"bytes,21,opt,name=override_password,json=overridePassword,proto3" json:"override_password,omitempty"`
	IsProduction                  bool              `protobuf:"varint,22,opt,name=is_production,json=isProduction,proto3" json:"is_production,omitempty"`
	AdditionalProps               map[string]string `protobuf:"bytes,23,rep,name=additional_props,json=additionalProps,proto3" json:"additional_props,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral          struct{}          `json:"-"`
	XXX_unrecognized              []byte            `json:"-"`
	XXX_sizecache                 int32             `json:"-"`
}

func (m *WifiGatewayConfig) Reset()         { *m = WifiGatewayConfig{} }
func (m *WifiGatewayConfig) String() string { return proto.CompactTextString(m) }
func (*WifiGatewayConfig) ProtoMessage()    {}
func (*WifiGatewayConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_configs_b35d5783e300c2e2, []int{1}
}
func (m *WifiGatewayConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WifiGatewayConfig.Unmarshal(m, b)
}
func (m *WifiGatewayConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WifiGatewayConfig.Marshal(b, m, deterministic)
}
func (dst *WifiGatewayConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WifiGatewayConfig.Merge(dst, src)
}
func (m *WifiGatewayConfig) XXX_Size() int {
	return xxx_messageInfo_WifiGatewayConfig.Size(m)
}
func (m *WifiGatewayConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WifiGatewayConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WifiGatewayConfig proto.InternalMessageInfo

func (m *WifiGatewayConfig) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *WifiGatewayConfig) GetMeshId() string {
	if m != nil {
		return m.MeshId
	}
	return ""
}

func (m *WifiGatewayConfig) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *WifiGatewayConfig) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *WifiGatewayConfig) GetWifiDisabled() bool {
	if m != nil {
		return m.WifiDisabled
	}
	return false
}

func (m *WifiGatewayConfig) GetMeshRssiThreshold() int32 {
	if m != nil {
		return m.MeshRssiThreshold
	}
	return 0
}

func (m *WifiGatewayConfig) GetClientChannel() string {
	if m != nil {
		return m.ClientChannel
	}
	return ""
}

func (m *WifiGatewayConfig) GetUseOverrideXwf() bool {
	if m != nil {
		return m.UseOverrideXwf
	}
	return false
}

func (m *WifiGatewayConfig) GetOverrideXwfEnabled() bool {
	if m != nil {
		return m.OverrideXwfEnabled
	}
	return false
}

func (m *WifiGatewayConfig) GetOverrideXwfRadiusServer() string {
	if m != nil {
		return m.OverrideXwfRadiusServer
	}
	return ""
}

func (m *WifiGatewayConfig) GetOverrideXwfConfig() string {
	if m != nil {
		return m.OverrideXwfConfig
	}
	return ""
}

func (m *WifiGatewayConfig) GetOverrideXwfDhcpDns1() string {
	if m != nil {
		return m.OverrideXwfDhcpDns1
	}
	return ""
}

func (m *WifiGatewayConfig) GetOverrideXwfDhcpDns2() string {
	if m != nil {
		return m.OverrideXwfDhcpDns2
	}
	return ""
}

func (m *WifiGatewayConfig) GetOverrideXwfRadiusSharedSecret() string {
	if m != nil {
		return m.OverrideXwfRadiusSharedSecret
	}
	return ""
}

func (m *WifiGatewayConfig) GetOverrideXwfRadiusAuthPort() int32 {
	if m != nil {
		return m.OverrideXwfRadiusAuthPort
	}
	return 0
}

func (m *WifiGatewayConfig) GetOverrideXwfRadiusAcctPort() int32 {
	if m != nil {
		return m.OverrideXwfRadiusAcctPort
	}
	return 0
}

func (m *WifiGatewayConfig) GetOverrideXwfUamSecret() string {
	if m != nil {
		return m.OverrideXwfUamSecret
	}
	return ""
}

func (m *WifiGatewayConfig) GetOverrideXwfPartnerName() string {
	if m != nil {
		return m.OverrideXwfPartnerName
	}
	return ""
}

func (m *WifiGatewayConfig) GetUseOverrideSsid() bool {
	if m != nil {
		return m.UseOverrideSsid
	}
	return false
}

func (m *WifiGatewayConfig) GetOverrideSsid() string {
	if m != nil {
		return m.OverrideSsid
	}
	return ""
}

func (m *WifiGatewayConfig) GetOverridePassword() string {
	if m != nil {
		return m.OverridePassword
	}
	return ""
}

func (m *WifiGatewayConfig) GetIsProduction() bool {
	if m != nil {
		return m.IsProduction
	}
	return false
}

func (m *WifiGatewayConfig) GetAdditionalProps() map[string]string {
	if m != nil {
		return m.AdditionalProps
	}
	return nil
}

func init() {
	proto.RegisterType((*WifiNetworkConfig)(nil), "magma.migration.wifi.WifiNetworkConfig")
	proto.RegisterMapType((map[string]string)(nil), "magma.migration.wifi.WifiNetworkConfig.AdditionalPropsEntry")
	proto.RegisterType((*WifiGatewayConfig)(nil), "magma.migration.wifi.WifiGatewayConfig")
	proto.RegisterMapType((map[string]string)(nil), "magma.migration.wifi.WifiGatewayConfig.AdditionalPropsEntry")
}

func init() { proto.RegisterFile("configs.proto", fileDescriptor_configs_b35d5783e300c2e2) }

var fileDescriptor_configs_b35d5783e300c2e2 = []byte{
	// 1020 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xeb, 0x6e, 0xe3, 0x36,
	0x13, 0x85, 0x37, 0x71, 0x12, 0x33, 0xbe, 0xd2, 0x4e, 0xc2, 0x04, 0x1b, 0x7c, 0xf9, 0xb2, 0xdb,
	0xc2, 0xd8, 0xa2, 0x6e, 0x37, 0x8b, 0xa2, 0x57, 0x14, 0xcd, 0x26, 0x8b, 0x6e, 0x81, 0x22, 0x35,
	0x94, 0xf4, 0x82, 0xfe, 0x21, 0xb8, 0x12, 0x65, 0x13, 0xd1, 0x0d, 0x24, 0x65, 0x39, 0x4f, 0xd1,
	0xe7, 0xe9, 0xdb, 0x15, 0x1c, 0x4a, 0xb2, 0xe4, 0x38, 0xe8, 0xbf, 0xfe, 0xb3, 0xce, 0x9c, 0xc3,
	0x19, 0xcd, 0x0c, 0x8f, 0x8c, 0x3a, 0x6e, 0x1c, 0xf9, 0x62, 0xa6, 0x26, 0x89, 0x8c, 0x75, 0x8c,
	0x47, 0x21, 0x9b, 0x85, 0x6c, 0x12, 0x8a, 0x99, 0x64, 0x5a, 0xc4, 0xd1, 0x24, 0x13, 0xbe, 0x38,
	0xff, 0xab, 0x85, 0x06, 0xbf, 0x0b, 0x5f, 0xdc, 0x70, 0x9d, 0xc5, 0xf2, 0xfe, 0x0a, 0x24, 0xf8,
	0x53, 0x34, 0x5c, 0x04, 0x94, 0xa5, 0x7a, 0x4e, 0x15, 0x97, 0x0b, 0x2e, 0x29, 0xf3, 0x3c, 0x49,
	0xb6, 0xcf, 0x1a, 0xe3, 0x96, 0xd3, 0x5f, 0x04, 0x97, 0xa9, 0x9e, 0xdf, 0x42, 0xe0, 0xd2, 0xf3,
	0xe4, 0x06, 0x7a, 0x12, 0x4b, 0x4d, 0x9a, 0x67, 0x8d, 0x71, 0xb3, 0x4e, 0x9f, 0xc6, 0x52, 0xe3,
	0xef, 0xd1, 0xf3, 0x35, 0xba, 0x9a, 0x33, 0xc9, 0x3d, 0xaa, 0xb8, 0x2b, 0xb9, 0x26, 0x3b, 0x90,
	0x86, 0x54, 0x75, 0xb7, 0x40, 0xb8, 0x85, 0x38, 0x7e, 0x89, 0xba, 0x89, 0x88, 0x66, 0x74, 0x1e,
	0x2b, 0x4d, 0x03, 0xa1, 0x34, 0xd9, 0x3d, 0xdb, 0x1a, 0xb7, 0x9c, 0xb6, 0x41, 0xdf, 0xc7, 0x4a,
	0xff, 0x2c, 0x94, 0xc6, 0x63, 0xd4, 0x07, 0x56, 0x94, 0x86, 0x34, 0x61, 0xee, 0x3d, 0xd7, 0x8a,
	0xec, 0x41, 0x45, 0xa0, 0xbe, 0x49, 0xc3, 0xa9, 0x45, 0xf1, 0x2b, 0x34, 0x00, 0xa6, 0x16, 0x21,
	0x8f, 0x53, 0x6d, 0xca, 0x50, 0xa4, 0x05, 0xd4, 0x9e, 0x09, 0xdc, 0x59, 0xfc, 0x96, 0xbb, 0xc0,
	0x5d, 0x66, 0x3e, 0x95, 0xcc, 0x13, 0xa9, 0xca, 0xcb, 0x27, 0xfb, 0x50, 0x70, 0x6f, 0x99, 0xf9,
	0x0e, 0xe0, 0xb6, 0x66, 0x7c, 0x8a, 0x90, 0xe1, 0xda, 0x31, 0x90, 0x01, 0x90, 0x5a, 0xcb, 0xcc,
	0xcf, 0x9b, 0x7c, 0x8e, 0x3a, 0x26, 0xec, 0xcd, 0xdd, 0x84, 0x7a, 0x91, 0x7a, 0x4d, 0x30, 0x30,
	0xf6, 0x97, 0x99, 0x7f, 0x3d, 0x77, 0x93, 0xeb, 0x48, 0xbd, 0x5e, 0xe7, 0x5c, 0x90, 0xe1, 0x3a,
	0xe7, 0x02, 0x7f, 0x89, 0x48, 0xb5, 0xa4, 0x5a, 0x2b, 0x47, 0x40, 0x3f, 0x58, 0x55, 0x56, 0xed,
	0xe3, 0x67, 0x68, 0x54, 0x11, 0xc2, 0x3c, 0x60, 0x6e, 0x07, 0xf0, 0xea, 0x83, 0x52, 0x64, 0xc6,
	0x00, 0x83, 0x5b, 0x13, 0xb8, 0xae, 0xb6, 0x82, 0xc3, 0x75, 0x81, 0xeb, 0x6a, 0x10, 0xbc, 0x44,
	0x5d, 0x23, 0x48, 0x59, 0x58, 0x14, 0x74, 0x04, 0x05, 0xb5, 0x97, 0x99, 0xff, 0x2b, 0x0b, 0xf3,
	0x3a, 0xc6, 0xa8, 0x6f, 0x58, 0x09, 0x93, 0x3a, 0xe2, 0x92, 0x46, 0x2c, 0xe4, 0x84, 0x00, 0xcf,
	0xa8, 0xa7, 0x16, 0xbe, 0x61, 0x21, 0x37, 0xcc, 0x70, 0x16, 0x6a, 0xba, 0x48, 0x22, 0xca, 0x23,
	0xf6, 0x21, 0xe0, 0x1e, 0xe9, 0x9c, 0x35, 0xc6, 0x7b, 0x4e, 0xd7, 0xe0, 0xbf, 0x25, 0xd1, 0x3b,
	0x8b, 0x9a, 0xcc, 0x25, 0x13, 0xf6, 0x9f, 0x74, 0x6d, 0xe6, 0x9c, 0x37, 0x85, 0x3b, 0xf1, 0x31,
	0xea, 0x95, 0x2c, 0xc9, 0xc3, 0x58, 0x73, 0xd2, 0x03, 0x5a, 0x27, 0xa7, 0x39, 0x00, 0xe2, 0x17,
	0xa8, 0x13, 0x27, 0x3c, 0x92, 0x65, 0xd2, 0x3e, 0x24, 0x6d, 0x03, 0x58, 0xa4, 0xc4, 0x68, 0x5b,
	0x29, 0xe1, 0x91, 0x06, 0x9c, 0x00, 0xbf, 0xf1, 0x09, 0xda, 0x4b, 0x98, 0x52, 0x59, 0x2c, 0x3d,
	0xf2, 0x0c, 0xf0, 0xf2, 0x19, 0x1f, 0xa1, 0xdd, 0x45, 0x40, 0x41, 0xb2, 0x05, 0xa1, 0x9d, 0x45,
	0x70, 0x6b, 0x44, 0xff, 0x43, 0x66, 0xbe, 0x65, 0x2e, 0x04, 0xb9, 0xcc, 0x2a, 0x15, 0x99, 0x26,
	0x68, 0x68, 0x08, 0x5a, 0x32, 0xdf, 0x17, 0x2e, 0x75, 0x03, 0xa6, 0x14, 0x57, 0xa4, 0x0d, 0xb7,
	0xc0, 0x8c, 0xe1, 0xce, 0x46, 0xae, 0x6c, 0x00, 0xcf, 0x50, 0x9f, 0x79, 0x9e, 0x30, 0xb7, 0x9e,
	0x05, 0xa6, 0x1d, 0x89, 0x22, 0xc7, 0x67, 0x5b, 0xe3, 0xfd, 0x8b, 0xef, 0x26, 0x9b, 0x5c, 0x61,
	0xf2, 0xc8, 0x11, 0x26, 0x97, 0xa5, 0x7e, 0x6a, 0xe4, 0xef, 0x22, 0x2d, 0x1f, 0x9c, 0x1e, 0xab,
	0xa3, 0x27, 0x6f, 0xd1, 0x68, 0x13, 0x11, 0xf7, 0xd1, 0xd6, 0x3d, 0x7f, 0xc8, 0x3b, 0x63, 0x7e,
	0xe2, 0x11, 0x6a, 0x2e, 0x58, 0x90, 0xf2, 0xbc, 0x2b, 0xf6, 0xe1, 0x9b, 0x67, 0x5f, 0x35, 0xce,
	0xff, 0xce, 0x1d, 0xe9, 0x47, 0xa6, 0x79, 0xc6, 0x1e, 0xf2, 0xcb, 0x82, 0xd1, 0xb6, 0x88, 0xfc,
	0xb8, 0x68, 0xae, 0xf9, 0x6d, 0x1a, 0x18, 0x72, 0x35, 0xa7, 0xa2, 0xe8, 0xed, 0x8e, 0x79, 0xfc,
	0x09, 0xba, 0x1e, 0x30, 0x2d, 0x74, 0xea, 0x71, 0x68, 0x6d, 0xc3, 0x29, 0x9f, 0xf1, 0x73, 0xd4,
	0x0a, 0xe2, 0x68, 0x66, 0x83, 0xdb, 0x10, 0x5c, 0x01, 0x66, 0xd0, 0xa6, 0x01, 0xd4, 0x13, 0xca,
	0x36, 0xbf, 0x69, 0x07, 0x6d, 0xc0, 0xeb, 0x1c, 0x33, 0xed, 0x87, 0xbc, 0x52, 0x29, 0x41, 0xf5,
	0x5c, 0x72, 0x35, 0x8f, 0x03, 0x0f, 0x6c, 0xab, 0xe9, 0x0c, 0x4c, 0xc8, 0x51, 0x4a, 0xdc, 0x15,
	0x01, 0xfc, 0x11, 0xea, 0xba, 0x81, 0xe0, 0x91, 0xa6, 0xee, 0x9c, 0x45, 0x11, 0x0f, 0xc8, 0xae,
	0x5d, 0x32, 0x8b, 0x5e, 0x59, 0xd0, 0x2c, 0x77, 0xaa, 0x38, 0x8d, 0x17, 0x5c, 0x4a, 0xe1, 0x71,
	0xba, 0xcc, 0x7c, 0x30, 0xac, 0x3d, 0xa7, 0x9b, 0x2a, 0xfe, 0x4b, 0x0e, 0xff, 0x91, 0xf9, 0xf8,
	0x73, 0x34, 0xaa, 0xb2, 0xca, 0x4d, 0x69, 0x01, 0x1b, 0xc7, 0x2b, 0x6a, 0xb1, 0x31, 0xdf, 0xa2,
	0x93, 0x9a, 0xa2, 0xee, 0x5f, 0x08, 0xca, 0x39, 0xaa, 0xe8, 0x6a, 0x3e, 0x36, 0x41, 0xc3, 0x9a,
	0x38, 0x37, 0x34, 0xeb, 0x7a, 0x83, 0x8a, 0x2a, 0x9f, 0xd5, 0x1b, 0x74, 0x58, 0xe3, 0xaf, 0x1c,
	0xae, 0x0d, 0x92, 0x61, 0x45, 0x52, 0x3a, 0xdd, 0x53, 0xa2, 0x0b, 0xb8, 0xe0, 0x1b, 0x45, 0x17,
	0xf8, 0x3d, 0xfa, 0xff, 0xc6, 0xd7, 0xaa, 0x79, 0xa0, 0xbd, 0xf8, 0xa7, 0x8f, 0xdf, 0xae, 0xea,
	0x85, 0x3f, 0xa0, 0xd3, 0x4d, 0x27, 0xad, 0x4c, 0xb1, 0x07, 0xd3, 0x3d, 0x7e, 0x74, 0x4a, 0x69,
	0x8e, 0x4f, 0x9d, 0x50, 0xba, 0x64, 0xff, 0xa9, 0x13, 0x0a, 0xb7, 0xfc, 0x02, 0x1d, 0xd5, 0x4e,
	0xa8, 0xd8, 0xa6, 0xfd, 0x78, 0x8c, 0x2a, 0xda, 0x95, 0x7d, 0x7e, 0x8d, 0x8e, 0x6b, 0xb2, 0x9a,
	0x8f, 0xda, 0x6f, 0xca, 0x61, 0x45, 0x58, 0xf5, 0xd3, 0x57, 0x68, 0x50, 0x5b, 0x39, 0x30, 0xa3,
	0x21, 0x6c, 0x51, 0xaf, 0xb2, 0x73, 0xe0, 0x4a, 0xc6, 0x03, 0x6b, 0x3c, 0xfb, 0x6d, 0x69, 0xc7,
	0x55, 0xd2, 0x27, 0xa8, 0xdc, 0x07, 0x5a, 0x1a, 0xdf, 0x81, 0xfd, 0xdb, 0x50, 0x04, 0xa6, 0x85,
	0x01, 0xbe, 0x40, 0x1d, 0xa1, 0x8c, 0x1d, 0x79, 0xa9, 0x6b, 0x2c, 0x03, 0xbe, 0x23, 0x7b, 0x4e,
	0x5b, 0xa8, 0x69, 0x89, 0x6d, 0xf4, 0xae, 0xa3, 0x7f, 0xf3, 0xae, 0x9a, 0x77, 0xfc, 0x77, 0xde,
	0xf5, 0x76, 0xf7, 0xcf, 0xa6, 0x7e, 0x48, 0xb8, 0xfa, 0xb0, 0x03, 0xdf, 0x9c, 0x37, 0xff, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x4b, 0x10, 0x9d, 0xe8, 0x84, 0x09, 0x00, 0x00,
}
