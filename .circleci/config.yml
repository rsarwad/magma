version: 2.1

refs:
  only_master: &only_master
    filters:
      branches:
        only: master

aliases:
  - &appdir
    working_directory: "symphony/app"

executors:
  node:
    docker:
      - image: circleci/node:10-buster-browsers-legacy

orbs:
  artifactory: circleci/artifactory@0.0.7
  build:
    commands:
      determinator:
        parameters:
          paths:
            description: Space seperated list of paths to tests against.
            type: string
        steps:
          - run:
              name: Checking for changes
              command: |
                paths=".circleci <<parameters.paths>>"
                echo "Checking paths [$paths]"
                for path in $paths; do
                  if [[ $(git diff master^ --name-only $path) ]]; then
                    echo "Found changes in $path"
                    exit 0
                  fi
                done
                echo "No changes in [$paths]"
                circleci step halt

commands:
  run-with-retry:
    description: Run command with retry
    parameters:
      command:
        description: Command to run
        type: string
      workdir:
        description: Path to cd into
        type: string
      retry-count:
        description: Number of retry
        type: integer
        default: 3
      sleep:
        description: Wait duration until next retry
        type: integer
        default: 5
    steps:
      - run: |
          retry() {
             MAX_RETRY=<< parameters.retry-count >>
             n=0
             until [ $n -ge $MAX_RETRY ]
             do
                "$@" && break
                n=$[$n+1]
                sleep << parameters.sleep >>
             done
             if [ $n -ge $MAX_RETRY ]; then
               echo "failed: ${@}" >&2
               exit 1
             fi
          }
          cd << parameters.workdir >>
          retry << parameters.command >>

  yarn-install:
    steps:
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "symphony/app/yarn.lock" }}
      - run:
          name: Install Dependencies
          <<: *appdir
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "symphony/app/yarn.lock" }}
          paths:
            - ~/.cache/yarn

jobs:
  integ-test:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run:
          name: Install tools
          command: |
            sudo apt-get update
            sudo apt-get install -y openvpn
      - run:
          name: Configure and start VPN client
          command: |
            echo $OVPN_CONF | base64 -d - > ciworker.conf
            sudo mv ciworker.conf /etc/openvpn/client.conf
            sudo service openvpn@client restart
      - run:
          name: Decode and set secrets
          command: |
            cd ${MAGMA_ROOT}/circleci
            echo $NODE_PKEY | base64 -d - > ci_node.pem
            chmod 0400 ci_node.pem
            echo $API_CERT | base64 -d - > ci_operator.pfx
            openssl pkcs12 -in ci_operator.pfx -nocerts -out ci_operator.key.pem -nodes -passin pass:
            openssl pkcs12 -in ci_operator.pfx -nokeys -out ci_operator.pem -passin pass:

            echo $PROD_ROOTCA | base64 -d - > rootCA.pem
            echo $PROD_CONTROL_PROXY | base64 -d - > control_proxy.yml

            echo export AWS_DEFAULT_REGION="us-east-1" >> $BASH_ENV
            echo export AWS_ACCESS_KEY_ID="$(printenv DEPLOY_AWS_ACCESS_KEY_ID)" >> $BASH_ENV
            echo export AWS_SECRET_ACCESS_KEY="$(printenv DEPLOY_AWS_SECRET_ACCESS_KEY)" >> $BASH_ENV
      - run:
          name: Select python 3.7.0
          command: pyenv global 3.7.0
      - run:
          name: Install python prerequisites
          command: pip3 install fabric3 jsonpickle requests PyYAML awscli
      # sleep 10 just in case the vpn client takes time to spin up
      - run:
          name: Run remote integ test
          command: |
            sleep 10
            cd ${MAGMA_ROOT}/circleci
            fab lte integ_test:branch=${CIRCLE_BRANCH},sha1=${CIRCLE_SHA1}

  feg-precommit:
    docker:
      - image: circleci/golang:1.13-stretch-node-browsers-legacy
    environment:
      - GO111MODULE=on
    steps:
      - checkout
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: ./circleci/golang_before_install.sh
      - run-with-retry:
         command: go mod download
         workdir: ${MAGMA_ROOT}/cwf/gateway
      - run:
          name: make feg precommit
          command: |
            cd ${MAGMA_ROOT}/feg/gateway
            make -C ${MAGMA_ROOT}/feg/gateway precommit

  cwag-precommit:
    docker:
      - image: circleci/golang:1.13-buster-node-browsers-legacy
    environment:
      - GO111MODULE=on
      - GOPROXY=https://proxy.golang.org
    steps:
      - checkout
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: ./circleci/golang_before_install.sh
      - run-with-retry:
         command: go mod download
         workdir: ${MAGMA_ROOT}/cwf/gateway
      - run:
          command: |
            cd ${MAGMA_ROOT}/cwf/gateway
            make -C ${MAGMA_ROOT}/cwf/gateway precommit

  cloud-test:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            sudo curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            sudo tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            sudo chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run:
          name: "Set Python Version"
          command: pyenv global 3.7.0
      - run: pip3 install PyYAML
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/cloud/docker
            python3 build.py -t

  orc8r-gateway-test:
    docker:
      - image: circleci/golang:1.13-buster-node-browsers-legacy
    environment:
      - GO111MODULE=on
      - GOPROXY=https://proxy.golang.org
    steps:
      - checkout
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run-with-retry:
         command: go mod download
         workdir: ${MAGMA_ROOT}/cwf/gateway
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/gateway/go
            go test ./...
            go vet ./...

  lte-test:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      - PYTHON_BUILD=${MAGMA_ROOT}/build
      - PIP_CACHE_HOME=${MAGMA_ROOT}/.pipcache
      - MAGMA_DEV_MODE=1
      - SKIP_SUDO_TESTS=1
      - CODEGEN_ROOT=/home/circleci/project/.codegen
      - SWAGGER_CODEGEN_JAR=/home/circleci/project/.codegen/swagger-codegen-cli.jar
    steps:
      - checkout
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: echo $MAGMA_ROOT
      - run: sudo apt-get update -y
      - run: sudo apt-get install -y libsystemd-dev pkg-config curl zip unzip
      - run: sudo apt-get install -y virtualenv python-babel python-dev build-essential python3-setuptools python-setuptools autogen autoconf libtool python3-apt python3-aioeventlet python3-requests python3-pip python-protobuf
      - run:
          command: |
            sudo curl -Lfs https://github.com/google/protobuf/releases/download/v3.1.0/protoc-3.1.0-linux-x86_64.zip -o protoc3.zip
            sudo unzip protoc3.zip -d protoc3
            sudo mv protoc3/bin/protoc /bin/protoc
            sudo chmod a+rx /bin/protoc
            sudo mv protoc3/include/google /usr/include/
            sudo chmod -R a+Xr /usr/include/google
            sudo rm -rf protoc3.zip protoc3
            mkdir ${CODEGEN_ROOT}
            wget https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli/2.2.3/swagger-codegen-cli-2.2.3.jar -O $SWAGGER_CODEGEN_JAR
            make -C $MAGMA_ROOT/lte/gateway/python test_all

  insync-checkin:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: /tmp/magma
    environment:
      - MAGMA_ROOT=/tmp/magma
      - MAGMA_MODULES_FILE=/tmp/magma/circleci/modules.yml
    steps:
      - checkout
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            sudo curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            sudo tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            sudo chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: sudo apt-get update
      - run:
          name: "Set Python Version"
          command: pyenv global 3.7.0
      - run: pip3 install PyYAML
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/cloud/docker
            python3 build.py -g
      - run: sudo chown -R circleci $MAGMA_ROOT/*
      - run: git add .
      - run: git status
      - run: git diff-index --quiet HEAD

  orc8r-core-build:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            sudo curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            sudo tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            sudo chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: sudo apt-get update
      - run:
          name: "Set Python Version"
          command: pyenv global 3.7.0
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/cloud/docker
            pip3 install PyYAML
            python3 build.py -nc

  orc8r-noncore-build:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            sudo curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            sudo tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            sudo chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: sudo apt-get update
      - run:
          name: "Set Python Version"
          command: pyenv global 3.7.0
      - run: pip3 install PyYAML
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/cloud/docker
            python3 build.py -nc

  nms-build:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      - NMS_ROOT=${MAGMA_ROOT}/symphony/app/fbcnms-projects/magmalte
    steps:
      - checkout
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            sudo curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            sudo tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            sudo chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run:
          command: |
            cd ${MAGMA_ROOT}/symphony/app/fbcnms-projects/magmalte
            docker-compose build magmalte

  nms-yarn-test:
    executor: node
    steps:
      - checkout
      - yarn-install
      - run:
          name: yarn test
          <<: *appdir
          command: yarn test:ci

  nms-flow-test:
    executor: node
    steps:
      - checkout
      - run:
          name: install flow
          <<: *appdir
          # Extract the specified flow version from the .flowconfig
          command: yarn add --dev -W flow-bin@$(x=$(grep "\[version\]" .flowconfig -A 1 | tail -n 1); echo ${x:1})
      - yarn-install
      - run:
          name: flow typecheck
          <<: *appdir
          command: yarn run flow

  eslint:
    executor: node
    steps:
      - checkout
      - yarn-install
      - run:
          name: eslint
          <<: *appdir
          command: yarn run eslint ./

  fossa-analyze:
    docker:
      - image: ubuntu:xenial
    working_directory: /tmp/magma
    environment:
      - MAGMA_ROOT=/tmp/magma
    steps:
      - checkout
      - run: apt update
      - run: apt install -y wget
      - run: wget https://github.com/fossas/fossa-cli/releases/download/v1.0.11/fossa-cli_1.0.11_linux_amd64.tar.gz
      - run: bash -c 'sha256sum fossa-cli_1.0.11_linux_amd64.tar.gz | grep -q 0e20286630a9bc5a17408c81e6ba9003f91a14fdd680b96ca4def400693e028e'
      - run: rm -f /tmp/magma/fossa
      - run: tar xzf fossa-cli_1.0.11_linux_amd64.tar.gz
      - run: cp /tmp/magma/fossa /usr/local/bin/
      - run: ${MAGMA_ROOT}/circleci/fossa-analyze-go.sh

  docusaurus_build_and_deploy:
    docker:
      - image: circleci/node:8.11.1
    steps:
      - checkout
      - run:
          name: Setup docusaurus expected directory structure
          command: |
            mv docs/docusaurus website/
            mv docs/readmes readmes/
            rm -rf docs/
            mv readmes/ docs/
      - run:
          name: Deploying to GitHub Pages
          command: |
            git config --global user.email "docusaurus-bot@users.noreply.github.com"
            git config --global user.name "docusaurus-bot"
            echo "machine github.com login docusaurus-bot password $GITHUB_TOKEN" > ~/.netrc
            cd website && yarn install
            CUSTOM_COMMIT_MESSAGE="[skip ci] Deploy website" GIT_USER=docusaurus-bot yarn run publish-gh-pages

  southpoll_lint:
    docker:
      - image: fedora:latest
    steps:
      - checkout
      - build/determinator:
          paths: "devmand"
      - run:
          name: Running lints on the devmand image
          command: |
            sudo dnf update -y
            sudo dnf install -y clang-format
            cd ./devmand/gateway/
            ./format
            if [[ $(git diff HEAD --name-only) ]]; then
               echo "############################"
               echo "Changes required!"
               git diff HEAD | less
               echo "Please run the format script"
               echo "############################"
               exit 1
            fi

  southpoll_test:
    machine:
      image: circleci/classic:latest
      docker_layer_caching: false
    steps:
      - checkout
      - build/determinator:
          paths: "devmand"
      - run:
          name: Testing the Devmand Image
          command: |
            : "${ARTIFACTORY_USER?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            : "${ARTIFACTORY_API_KEY?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            sudo apt-get update -y
            sudo apt-get install -y realpath
            docker login -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_API_KEY} facebookconnectivity-southpoll-dev-docker.jfrog.io
            cd ./devmand/gateway/docker
            ./scripts/build_cached_firstparty
            ./scripts/build
            ./scripts/test

  southpoll_publish_dev:
    machine:
      docker_layer_caching: false
    steps:
      - checkout
      - build/determinator:
          paths: "devmand"
      - run:
          name: Publishing all southpoll images to southpoll-dev
          command: |
            : "${ARTIFACTORY_USER?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            : "${ARTIFACTORY_API_KEY?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            sudo apt-get update -y
            sudo apt-get install -y realpath
            docker login -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_API_KEY} facebookconnectivity-southpoll-dev-docker.jfrog.io
            cd ./devmand/gateway/docker
            ./scripts/build_cached_firstparty
            ./scripts/build
            ./scripts/push

  southpoll_publish_prod:
    machine:
      docker_layer_caching: false
    steps:
      - checkout
      - build/determinator:
          paths: "devmand"
      - run:
          name: Publishing all southpoll images to southpoll-prod
          command: |
            : "${ARTIFACTORY_USER?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            : "${ARTIFACTORY_API_KEY?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            sudo apt-get update -y
            sudo apt-get install -y realpath
            export SYMPHONY_DOCKER_REGISTRY=facebookconnectivity-southpoll-prod-docker.jfrog.io
            docker login -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_API_KEY} facebookconnectivity-southpoll-prod-docker.jfrog.io
            cd ./devmand/gateway/docker
            ./scripts/build_cached_firstparty
            ./scripts/build
            ./scripts/push_prod

  southpoll_firstparty:
    machine:
      docker_layer_caching: false
    steps:
      - checkout
      - build/determinator:
          paths: "orc8r/gateway/c/common"
      - run:
          name: Building southpoll firstparty image
          command: |
            : "${ARTIFACTORY_USER?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            : "${ARTIFACTORY_API_KEY?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            sudo apt-get update -y
            sudo apt-get install -y realpath
            export SYMPHONY_DOCKER_REGISTRY=facebookconnectivity-southpoll-prod-docker.jfrog.io
            docker login -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_API_KEY} facebookconnectivity-southpoll-prod-docker.jfrog.io
            cd ./devmand/gateway/docker
            ./scripts/build_cached_firstparty
            ./scripts/build

  southpoll_thirdparty:
    machine:
      docker_layer_caching: false
    steps:
      - checkout
      - build/determinator:
          paths: "devmand/gateway/docker/thirdparty"
      - run:
          name: Building southpoll thirdparty image
          command: |
            : "${ARTIFACTORY_USER?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            : "${ARTIFACTORY_API_KEY?Artifactory USER and API Key must be set as Environment variables before running this command.}"
            sudo apt-get update -y
            sudo apt-get install -y realpath
            export SYMPHONY_DOCKER_REGISTRY=facebookconnectivity-southpoll-prod-docker.jfrog.io
            docker login -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_API_KEY} facebookconnectivity-southpoll-prod-docker.jfrog.io
            cd ./devmand/gateway/docker
            ./scripts/build_cached
            ./scripts/build

workflows:
  version: 2.1

  # Disabling this job until we spin up more worker capacity
  #magma-lte:
#    jobs:
#      - integ-test:
#          <<: *only_master

  magma:
    jobs:
      - feg-precommit
      - cwag-precommit
      - cloud-test
      - orc8r-gateway-test
      - lte-test
      - insync-checkin
      - nms-flow-test
      - fossa-analyze
      - eslint
      - nms-yarn-test:
          requires:
            - nms-flow-test
      - orc8r-core-build:
          requires:
            - cloud-test
            - orc8r-gateway-test
            - insync-checkin
      - orc8r-noncore-build:
          requires:
            - cloud-test
            - orc8r-gateway-test
            - insync-checkin
      - nms-build:
          requires:
              - cloud-test
              - orc8r-gateway-test

  docusaurus_build_and_deploy:
    jobs:
      - docusaurus_build_and_deploy:
          <<: *only_master

  southpoll_test_and_publish:
    jobs:
      # - southpoll_thirdparty
      # - southpoll_firstparty
      - southpoll_lint
      # - southpoll_test
      # - southpoll_publish_dev:
      #     requires:
      #       - southpoll_lint
      #       - southpoll_test
      # - southpoll_publish_prod:
      #     requires:
      #       - southpoll_lint
      #       - southpoll_test
      #     <<: *only_master
