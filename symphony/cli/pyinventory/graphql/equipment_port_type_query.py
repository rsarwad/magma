#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass
from datetime import datetime
from gql.gql.datetime_utils import DATETIME_FIELD
from gql.gql.graphql_client import GraphqlClient
from functools import partial
from numbers import Number
from typing import Any, Callable, List, Mapping, Optional

from dataclasses_json import DataClassJsonMixin

from .property_type_fragment import PropertyTypeFragment, QUERY as PropertyTypeFragmentQuery

@dataclass
class EquipmentPortTypeQuery(DataClassJsonMixin):
    @dataclass
    class EquipmentPortTypeQueryData(DataClassJsonMixin):
        @dataclass
        class Node(DataClassJsonMixin):
            @dataclass
            class PropertyType(PropertyTypeFragment):
                pass

            id: str
            name: str
            propertyTypes: List[PropertyType]
            linkPropertyTypes: List[PropertyType]

        port_type: Optional[Node] = None

    data: EquipmentPortTypeQueryData

    __QUERY__: str = PropertyTypeFragmentQuery + """
    query EquipmentPortTypeQuery($id: ID!) {
  port_type: node(id: $id) {
    ... on EquipmentPortType {
      id
      name
      propertyTypes {
        ...PropertyTypeFragment
      }
      linkPropertyTypes {
        ...PropertyTypeFragment
      }
    }
  }
}

    """

    @classmethod
    # fmt: off
    def execute(cls, client: GraphqlClient, id: str) -> EquipmentPortTypeQueryData:
        # fmt: off
        variables = {"id": id}
        response_text = client.call(cls.__QUERY__, variables=variables)
        return cls.from_json(response_text).data
