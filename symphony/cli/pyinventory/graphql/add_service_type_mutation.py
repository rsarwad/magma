#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass
from datetime import datetime
from gql.gql.datetime_utils import DATETIME_FIELD
from gql.gql.graphql_client import GraphqlClient
from functools import partial
from numbers import Number
from typing import Any, Callable, List, Mapping, Optional

from dataclasses_json import DataClassJsonMixin

from .property_type_fragment import PropertyTypeFragment, QUERY as PropertyTypeFragmentQuery
from .service_type_create_data_input import ServiceTypeCreateData


@dataclass
class AddServiceTypeMutation(DataClassJsonMixin):
    @dataclass
    class AddServiceTypeMutationData(DataClassJsonMixin):
        @dataclass
        class ServiceType(DataClassJsonMixin):
            @dataclass
            class PropertyType(PropertyTypeFragment):
                pass

            id: str
            name: str
            hasCustomer: bool
            propertyTypes: List[PropertyType]

        addServiceType: ServiceType

    data: AddServiceTypeMutationData

    __QUERY__: str = PropertyTypeFragmentQuery + """
    mutation AddServiceTypeMutation($data: ServiceTypeCreateData!) {
  addServiceType(data: $data) {
    id
    name
    hasCustomer
    propertyTypes {
      ...PropertyTypeFragment
    }
  }
}

    """

    @classmethod
    # fmt: off
    def execute(cls, client: GraphqlClient, data: ServiceTypeCreateData) -> AddServiceTypeMutationData:
        # fmt: off
        variables = {"data": data}
        response_text = client.call(cls.__QUERY__, variables=variables)
        return cls.from_json(response_text).data
