#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass
from datetime import datetime
from gql.gql.datetime_utils import DATETIME_FIELD
from gql.gql.graphql_client import GraphqlClient
from gql.gql.client import OperationException
from gql.gql.reporter import FailedOperationException
from functools import partial
from numbers import Number
from typing import Any, Callable, List, Mapping, Optional
from time import perf_counter
from dataclasses_json import DataClassJsonMixin

from ..fragment.equipment_port_definition import EquipmentPortDefinitionFragment, QUERY as EquipmentPortDefinitionFragmentQuery
from ..fragment.equipment_position_definition import EquipmentPositionDefinitionFragment, QUERY as EquipmentPositionDefinitionFragmentQuery
from ..fragment.property_type import PropertyTypeFragment, QUERY as PropertyTypeFragmentQuery

QUERY: List[str] = EquipmentPortDefinitionFragmentQuery + EquipmentPositionDefinitionFragmentQuery + PropertyTypeFragmentQuery + ["""
query EquipmentTypesQuery {
  equipmentTypes {
    edges {
      node {
        id
        name
        category
        propertyTypes {
          ...PropertyTypeFragment
        }
        positionDefinitions {
          ...EquipmentPositionDefinitionFragment
        }
        portDefinitions {
          ...EquipmentPortDefinitionFragment
        }
      }
    }
  }
}

"""]

@dataclass
class EquipmentTypesQuery(DataClassJsonMixin):
    @dataclass
    class EquipmentTypesQueryData(DataClassJsonMixin):
        @dataclass
        class EquipmentTypeConnection(DataClassJsonMixin):
            @dataclass
            class EquipmentTypeEdge(DataClassJsonMixin):
                @dataclass
                class EquipmentType(DataClassJsonMixin):
                    @dataclass
                    class PropertyType(PropertyTypeFragment):
                        pass

                    @dataclass
                    class EquipmentPositionDefinition(EquipmentPositionDefinitionFragment):
                        pass

                    @dataclass
                    class EquipmentPortDefinition(EquipmentPortDefinitionFragment):
                        pass

                    id: str
                    name: str
                    propertyTypes: List[PropertyType]
                    positionDefinitions: List[EquipmentPositionDefinition]
                    portDefinitions: List[EquipmentPortDefinition]
                    category: Optional[str]

                node: Optional[EquipmentType]

            edges: List[EquipmentTypeEdge]

        equipmentTypes: EquipmentTypeConnection

    data: EquipmentTypesQueryData

    @classmethod
    # fmt: off
    def execute(cls, client: GraphqlClient) -> EquipmentTypesQueryData.EquipmentTypeConnection:
        # fmt: off
        variables = {}
        try:
            network_start = perf_counter()
            response_text = client.call(''.join(set(QUERY)), variables=variables)
            decode_start = perf_counter()
            res = cls.from_json(response_text).data
            decode_time = perf_counter() - decode_start
            network_time = decode_start - network_start
            client.reporter.log_successful_operation("EquipmentTypesQuery", variables, network_time, decode_time)
            return res.equipmentTypes
        except OperationException as e:
            raise FailedOperationException(
                client.reporter,
                e.err_msg,
                e.err_id,
                "EquipmentTypesQuery",
                variables,
            )
