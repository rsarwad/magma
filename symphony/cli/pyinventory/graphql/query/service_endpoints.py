#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass
from datetime import datetime
from gql.gql.datetime_utils import DATETIME_FIELD
from gql.gql.graphql_client import GraphqlClient
from gql.gql.client import OperationException
from gql.gql.reporter import FailedOperationException
from functools import partial
from numbers import Number
from typing import Any, Callable, List, Mapping, Optional
from time import perf_counter
from dataclasses_json import DataClassJsonMixin

from ..fragment.service_endpoint import ServiceEndpointFragment, QUERY as ServiceEndpointFragmentQuery

QUERY: List[str] = ServiceEndpointFragmentQuery + ["""
query ServiceEndpointsQuery($id: ID!) {
  service: node(id: $id) {
    ... on Service {
      serviceType {
        id
      }
      endpoints {
        ...ServiceEndpointFragment
      }
    }
  }
}

"""]

@dataclass
class ServiceEndpointsQuery(DataClassJsonMixin):
    @dataclass
    class ServiceEndpointsQueryData(DataClassJsonMixin):
        @dataclass
        class Node(DataClassJsonMixin):
            @dataclass
            class ServiceType(DataClassJsonMixin):
                id: str

            @dataclass
            class ServiceEndpoint(ServiceEndpointFragment):
                pass

            serviceType: ServiceType
            endpoints: List[ServiceEndpoint]

        service: Optional[Node]

    data: ServiceEndpointsQueryData

    @classmethod
    # fmt: off
    def execute(cls, client: GraphqlClient, id: str) -> Optional[ServiceEndpointsQueryData.Node]:
        # fmt: off
        variables = {"id": id}
        try:
            network_start = perf_counter()
            response_text = client.call(''.join(set(QUERY)), variables=variables)
            decode_start = perf_counter()
            res = cls.from_json(response_text).data
            decode_time = perf_counter() - decode_start
            network_time = decode_start - network_start
            client.reporter.log_successful_operation("ServiceEndpointsQuery", variables, network_time, decode_time)
            return res.service
        except OperationException as e:
            raise FailedOperationException(
                client.reporter,
                e.err_msg,
                e.err_id,
                "ServiceEndpointsQuery",
                variables,
            )
