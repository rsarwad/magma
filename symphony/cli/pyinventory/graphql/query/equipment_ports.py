#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass
from datetime import datetime
from gql.gql.datetime_utils import DATETIME_FIELD
from gql.gql.graphql_client import GraphqlClient
from gql.gql.client import OperationException
from gql.gql.reporter import FailedOperationException
from functools import partial
from numbers import Number
from typing import Any, Callable, List, Mapping, Optional
from time import perf_counter
from dataclasses_json import DataClassJsonMixin

from ..fragment.link import LinkFragment, QUERY as LinkFragmentQuery
from ..fragment.property import PropertyFragment, QUERY as PropertyFragmentQuery

QUERY: List[str] = LinkFragmentQuery + PropertyFragmentQuery + ["""
query EquipmentPortsQuery($id: ID!) {
  equipment: node(id: $id) {
    ... on Equipment {
      ports {
        id
        properties {
          ...PropertyFragment
        }
        definition {
          id
          name
          portType {
            id
            name
          }
        }
        link {
          ...LinkFragment
        }
      }
    }
  }
}

"""]

@dataclass
class EquipmentPortsQuery(DataClassJsonMixin):
    @dataclass
    class EquipmentPortsQueryData(DataClassJsonMixin):
        @dataclass
        class Node(DataClassJsonMixin):
            @dataclass
            class EquipmentPort(DataClassJsonMixin):
                @dataclass
                class Property(PropertyFragment):
                    pass

                @dataclass
                class EquipmentPortDefinition(DataClassJsonMixin):
                    @dataclass
                    class EquipmentPortType(DataClassJsonMixin):
                        id: str
                        name: str

                    id: str
                    name: str
                    portType: Optional[EquipmentPortType]

                @dataclass
                class Link(LinkFragment):
                    pass

                id: str
                properties: List[Property]
                definition: EquipmentPortDefinition
                link: Optional[Link]

            ports: List[EquipmentPort]

        equipment: Optional[Node]

    data: EquipmentPortsQueryData

    @classmethod
    # fmt: off
    def execute(cls, client: GraphqlClient, id: str) -> Optional[EquipmentPortsQueryData.Node]:
        # fmt: off
        variables = {"id": id}
        try:
            network_start = perf_counter()
            response_text = client.call(''.join(set(QUERY)), variables=variables)
            decode_start = perf_counter()
            res = cls.from_json(response_text).data
            decode_time = perf_counter() - decode_start
            network_time = decode_start - network_start
            client.reporter.log_successful_operation("EquipmentPortsQuery", variables, network_time, decode_time)
            return res.equipment
        except OperationException as e:
            raise FailedOperationException(
                client.reporter,
                e.err_msg,
                e.err_id,
                "EquipmentPortsQuery",
                variables,
            )
