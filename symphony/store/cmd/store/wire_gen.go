// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/facebookincubator/symphony/pkg/log"
	"github.com/facebookincubator/symphony/pkg/server"
	"github.com/facebookincubator/symphony/pkg/server/xserver"
	"github.com/facebookincubator/symphony/pkg/telemetry"
	"github.com/facebookincubator/symphony/store/handler"
	"github.com/facebookincubator/symphony/store/sign/s3"
	"gocloud.dev/server/health"
)

// Injectors from wire.go:

func newApplication(flags *cliFlags) (*application, func(), error) {
	config := flags.LogConfig
	logger, cleanup, err := log.ProvideLogger(config)
	if err != nil {
		return nil, nil, err
	}
	zapLogger := log.ProvideZapLogger(logger)
	s3Config := flags.S3Config
	signer, err := s3.NewSigner(s3Config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	handlerConfig := handler.Config{
		Logger: logger,
		Signer: signer,
	}
	handlerHandler := handler.New(handlerConfig)
	xserverZapLogger := xserver.NewRequestLogger(logger)
	v := _wireValue
	v2 := xserver.DefaultViews()
	telemetryConfig := &flags.TelemetryConfig
	exporter, err := telemetry.ProvideViewExporter(telemetryConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	traceExporter, cleanup2, err := telemetry.ProvideTraceExporter(telemetryConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	profilingEnabler := _wireProfilingEnablerValue
	sampler := telemetry.ProvideTraceSampler(telemetryConfig)
	handlerFunc := xserver.NewRecoveryHandler(logger)
	defaultDriver := _wireDefaultDriverValue
	options := &server.Options{
		RequestLogger:         xserverZapLogger,
		HealthChecks:          v,
		Views:                 v2,
		ViewExporter:          exporter,
		TraceExporter:         traceExporter,
		EnableProfiling:       profilingEnabler,
		DefaultSamplingPolicy: sampler,
		RecoveryHandler:       handlerFunc,
		Driver:                defaultDriver,
	}
	serverServer := server.New(handlerHandler, options)
	tcpAddr := flags.ListenAddress
	mainApplication := &application{
		Logger: zapLogger,
		server: serverServer,
		addr:   tcpAddr,
	}
	return mainApplication, func() {
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireValue                 = []health.Checker(nil)
	_wireProfilingEnablerValue = server.ProfilingEnabler(true)
	_wireDefaultDriverValue    = &server.DefaultDriver{}
)
