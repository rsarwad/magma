/*
Copyright 2020 The Magma Authors.

This source code is licensed under the BSD-style license found in the
LICENSE file in the root directory of this source tree.

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package magma.feg;
option go_package = "magma/feg/cloud/go/protos";

service S8Proxy {
    rpc CreateSession(CreateSessionRequestPgw) returns (CreateSessionResponsePgw) {}
    rpc DeleteSession(DeleteSessionRequestPgw) returns (DeleteSessionResponsePgw) {}
    rpc SendEcho(EchoRequest) returns (EchoResponse) {}
}

// 3GPP TS 29.274  (not all 3gpp create session fields are included)
message CreateSessionRequestPgw {
    string pgwAddrs = 1;        // Ip:port of pgw to send the request. If empty
                                // s8_proxy will use value in its config
    string imsi = 2;
    string msisdn = 3;
    string mei = 4;

    ServingNetwork serving_network = 5;
    UserLocationInformation uli = 6;

    RATType rat_type = 7;
    PDNType pdn_type = 8;
    PdnAddressAllocation paa = 9;

    string apn = 10;
    Ambr ambr = 11;                      //Aggregate Maximum BitRate
    SelectionModeType selection_mode = 12;

    BearerContext bearer_context = 13;   // Contains AGW user plane FTEID
    uint32 c_agw_teid = 14;              // AGW control plane TEID

    bytes indication_flag = 15;
    string charging_characteristics = 16;
    TimeZone time_zone = 17;
}

enum PDNType {
    UNUSED = 0;
    IPV4 = 1;
    IPV6 = 2;
    IPV4V6 = 3;
    NonIP = 5;
}

enum RATType {
    RESERVED = 0;
    UTRAN = 1;
    GERAN = 2;
    WLAN = 3;
    GAN = 4;
    HSPA = 5;
    EUTRAN = 6;
    VIRTUAL = 7;
    EUTRAN_NB_IOT = 8;
    LTE_M = 9;
    NR = 10;
}

enum SelectionModeType{
    APN_provided_subscription_verified = 0;
    ms_APN_subscription_not_verified = 1;
    network_APN_subscription_not_verified = 2;
}

message UserLocationInformation {
    uint32 lac = 1;
    uint32 ci = 2;
    uint32 sac = 3;
    uint32 rac = 4;
    uint32 tac = 5;       // used on magma
    uint32 eci = 6;       // used on magma
    uint32 MeNbi = 7;     // Macro eNodeB ID field
    uint32 EMeNbi = 8;    // Extended Macro eNodeB ID field
}

message ServingNetwork {
    string mcc = 1;             //TODO: change to bytes
    string mnc = 2;             //TODO: change to bytes
}

message BearerContext {
    uint32 id = 1;
    Fteid user_plane_fteid = 2;
    QosInformation qos = 3;
    uint32 charging_id = 4;
}

message QosInformation {
    uint32 pci = 1;
    uint32 priority_level = 2;
    uint32 preemption_capability = 3;
    uint32 preemption_vulnerability = 4;
    uint32 qci = 5;
    Ambr gbr = 6;
    Ambr mbr = 7;
}

message Ambr {
    uint64 br_ul = 1;
    uint64 br_dl = 2;
}

message PdnAddressAllocation{
    string ipv4_address = 1;
    string ipv6_address = 2;
    uint32 ipv6_prefix = 3;
}

message TimeZone {
    int32 delta_seconds = 1;            // delta in seconds from UTC
    uint32 daylight_saving_time = 2;    // Set to 0 for non daylight savings
}

message Fteid {
    string ipv4_address = 1;
    string ipv6_address = 2;
    uint32 teid = 3;
}

message CreateSessionResponsePgw {
    PDNType pdn_type = 1;
    PdnAddressAllocation paa = 2;       // subscriber_ip
    uint32 apn_restriction = 3;
    uint32 c_agw_teid = 4;
    Fteid c_pgw_fteid = 5;
    BearerContext bearer_context = 6;
    GtpError gtp_error = 7;

}

message DeleteSessionRequestPgw {
    string pgwAddrs = 1;
    string imsi = 2;
    uint32 bearer_id = 3;
    uint32 c_agw_teid = 4;          // AGW control plane TEID
    Fteid c_pgw_fteid = 5;
}

message DeleteSessionResponsePgw{
    GtpError gtp_error = 1;
}

message EchoRequest{
    string pgwAddrs = 1;        // Ip:port of pgw to send the request
    string imsi = 2;            // needed for nh in feg
}

message EchoResponse{
}

message GtpError {
    uint32 cause = 1;
    string msg= 2;

}
