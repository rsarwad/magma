version: "3.7"

# Standard logging for each service
x-logging: &logging_anchor
  driver: "json-file"
  options:
    max-size: "10mb"
    max-file: "10"

# Standard volumes mounted
x-standard-volumes: &volumes_anchor
  - ${ROOTCA_PATH}:/var/opt/magma/certs/rootCA.pem
  - ${CERTS_VOLUME}:/var/opt/magma/certs
  - ${CONFIGS_OVERRIDE_VOLUME}:/var/opt/magma/configs
  - ${CONFIGS_DEFAULT_VOLUME}:/etc/magma
  - ${CONFIGS_TEMPLATES_PATH}:/etc/magma/templates
  - ${CONTROL_PROXY_PATH}:/etc/magma/control_proxy.yml
  - /etc/snowflake:/etc/snowflake

x-generic-service: &service
  volumes: *volumes_anchor
  logging: *logging_anchor
  restart: always
  network_mode: host

# Generic python anchor to avoid repetition for orc8r python services
x-orc8r-service: &pyservice
  <<: *service
  image: ${DOCKER_REGISTRY}gateway_python:${IMAGE_VERSION}

# Generic python anchor to avoid repetition for lte python services
x-lte-pyservice: &ltepyservice
  <<: *service
  image: ${DOCKER_REGISTRY}gateway_pipelined:${IMAGE_VERSION}

# Generic python anchor to avoid repetition for lte c services
x-lte-cservice: &ltecservice
  <<: *service
  image: ${DOCKER_REGISTRY}gateway_sessiond:${IMAGE_VERSION}

x-feg-goservice: &feggoservice
  <<: *service
  image: ${DOCKER_REGISTRY}gateway_go:${IMAGE_VERSION}

services:
  aaa_server:
    <<: *feggoservice
    container_name: aaa_server
    command: envdir /var/opt/magma/envdir /var/opt/magma/bin/aaa_server -logtostderr=true -v=0

  control_proxy:
    <<: *pyservice
    container_name: control_proxy
    command: >
      sh -c "/usr/local/bin/generate_nghttpx_config.py &&
             /usr/bin/env nghttpx --conf /var/opt/magma/tmp/nghttpx.conf /var/opt/magma/certs/controller.key /var/opt/magma/certs/controller.crt"

  eap_aka:
    <<: *feggoservice
    container_name: eap_aka
    environment:
      USE_REMOTE_SWX_PROXY: 1 # Relay to FeG
    command: envdir /var/opt/magma/envdir /var/opt/magma/bin/eap_aka -logtostderr=true -v=0

  magmad:
    <<: *pyservice
    container_name: magmad
    volumes:
      - ${ROOTCA_PATH}:/var/opt/magma/certs/rootCA.pem
      - ${CERTS_VOLUME}:/var/opt/magma/certs
      - ${CONFIGS_OVERRIDE_VOLUME}:/var/opt/magma/configs
      - ${CONFIGS_DEFAULT_VOLUME}:/etc/magma
      - ${CONFIGS_TEMPLATES_PATH}:/etc/magma/templates
      - ${CONTROL_PROXY_PATH}:/etc/magma/control_proxy.yml
      - /etc/snowflake:/etc/snowflake
      - /var/run/docker.sock:/var/run/docker.sock
    command: python3.5 -m magma.magmad.main

  pipelined:
    <<: *ltepyservice
    container_name: pipelined
    volumes:
      - ${ROOTCA_PATH}:/var/opt/magma/certs/rootCA.pem
      - ${CERTS_VOLUME}:/var/opt/magma/certs
      - ${CONFIGS_OVERRIDE_VOLUME}:/var/opt/magma/configs
      - ${CONFIGS_DEFAULT_VOLUME}:/etc/magma
      - ${CONFIGS_TEMPLATES_PATH}:/etc/magma/templates
      - ${CONTROL_PROXY_PATH}:/etc/magma/control_proxy.yml
      - /etc/snowflake:/etc/snowflake
      - /var/run/openvswitch:/var/run/openvswitch
    command: >
      sh -c "set bridge br0 protocols=protocols=OpenFlow10,OpenFlow13,OpenFlow14 other-config:disable-in-band=true &&
        /usr/bin/ovs-vsctl set-controller br0 tcp:127.0.0.1:6633 &&
        python3 -m magma.pipelined.main"

  radius:
    image: ${DOCKER_REGISTRY}gateway_radius:${IMAGE_VERSION}
    container_name: radius
    logging: *logging_anchor
    environment:
      - RADIUS_AUTH_PORT=1812
      - RADIUS_ACCT_PORT=1813
      - RADIUS_COA_PORT=3799
      - RADIUS_COA_GRPC_PORT=9108
      - RADIUS_SECRET=123456
      - COA_FIXED_ENDPOINT=127.0.0.1:4799
      - AAA_ENDPOINT=127.0.0.1:9109
    network_mode: host
    restart: always

  radiusd:
    <<: *feggoservice
    container_name: radiusd
    command: envdir /var/opt/magma/envdir /var/opt/magma/bin/radiusd -logtostderr=true -v=0

  redis:
    <<: *pyservice
    container_name: redis
    command: >
      /bin/bash -c "/usr/local/bin/generate_service_config.py --service=redis --template=redis &&
             /usr/bin/redis-server /var/opt/magma/tmp/redis.conf --daemonize no &&
             /usr/bin/redis-cli shutdown"

  sessiond:
    <<: *ltecservice
    container_name: sessiond
    command: /usr/local/bin/sessiond
